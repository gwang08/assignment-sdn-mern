const mongoose = require('mongoose');
const ConsultationSchedule = require('./models/campaign/consultationSchedule');
const { CONSULTATION_STATUS } = require('./utils/enums');

// Connect to MongoDB
mongoose.connect('mongodb://127.0.0.1:27017/assigment-sdn12', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const seedConsultations = async () => {
  try {
    // Clear existing consultations
    await ConsultationSchedule.deleteMany({});

    // Create some sample Campaign Results and Medical Staff IDs
    // In a real scenario, you would get these from the database
    const sampleCampaignResultId = new mongoose.Types.ObjectId();
    const sampleMedicalStaffId = new mongoose.Types.ObjectId();

    // Consultation data for the two students
    const consultations = [
      {
        // For student 685c2633f5b6c16e86b1b26a (father's child) - upcoming
        campaignResult: sampleCampaignResultId,
        student: new mongoose.Types.ObjectId('685c2633f5b6c16e86b1b26a'),
        medicalStaff: sampleMedicalStaffId,
        attending_parent: new mongoose.Types.ObjectId('685c226dbfd3a2ccf6e98951'),
        scheduledDate: new Date('2025-07-01T09:00:00.000Z'),
        duration: 30,
        reason: 'Ki·ªÉm tra th·ªã l·ª±c ƒë·ªãnh k·ª≥',
        status: CONSULTATION_STATUS.SCHEDULED,
        notes: 'H·ªçc sinh c·∫ßn ki·ªÉm tra th·ªã l·ª±c theo l·ªãch ƒë·ªãnh k·ª≥',
        notificationsSent: true,
      },
      {
        // For student 685c2633f5b6c16e86b1b26a (father's child) - completed
        campaignResult: sampleCampaignResultId,
        student: new mongoose.Types.ObjectId('685c2633f5b6c16e86b1b26a'),
        medicalStaff: sampleMedicalStaffId,
        attending_parent: new mongoose.Types.ObjectId('685c226dbfd3a2ccf6e98951'),
        scheduledDate: new Date('2025-06-20T14:00:00.000Z'),
        duration: 45,
        reason: 'T∆∞ v·∫•n dinh d∆∞·ª°ng',
        status: CONSULTATION_STATUS.COMPLETED,
        notes: 'Ph·ª• huynh quan t√¢m ƒë·∫øn ch·∫ø ƒë·ªô ƒÉn u·ªëng c·ªßa con',
        notificationsSent: true,
      },
      {
        // For student 685c2633f5b6c16e86b1b26d (mother's child) - upcoming
        campaignResult: sampleCampaignResultId,
        student: new mongoose.Types.ObjectId('685c2633f5b6c16e86b1b26d'),
        medicalStaff: sampleMedicalStaffId,
        attending_parent: new mongoose.Types.ObjectId('685c226dbfd3a2ccf6e98951'),
        scheduledDate: new Date('2025-07-03T10:30:00.000Z'),
        duration: 30,
        reason: 'Theo d√µi d·ªã ·ª©ng th·ª©c ƒÉn',
        status: CONSULTATION_STATUS.SCHEDULED,
        notes: 'H·ªçc sinh c√≥ bi·ªÉu hi·ªán d·ªã ·ª©ng v·ªõi m·ªôt s·ªë th·ª±c ph·∫©m',
        notificationsSent: true,
      },
      {
        // For student 685c2633f5b6c16e86b1b26d (mother's child) - cancelled
        campaignResult: sampleCampaignResultId,
        student: new mongoose.Types.ObjectId('685c2633f5b6c16e86b1b26d'),
        medicalStaff: sampleMedicalStaffId,
        attending_parent: new mongoose.Types.ObjectId('685c226dbfd3a2ccf6e98951'),
        scheduledDate: new Date('2025-06-18T11:00:00.000Z'),
        duration: 30,
        reason: 'Ki·ªÉm tra s·ª©c kh·ªèe t·ªïng qu√°t',
        status: CONSULTATION_STATUS.CANCELLED,
        notes: 'Ph·ª• huynh y√™u c·∫ßu ki·ªÉm tra s·ª©c kh·ªèe t·ªïng qu√°t cho con',
        cancelReason: 'Ph·ª• huynh c√≥ vi·ªác ƒë·ªôt xu·∫•t kh√¥ng th·ªÉ tham gia',
        notificationsSent: true,
      },
      {
        // For student 685c2633f5b6c16e86b1b26a - future appointment
        campaignResult: sampleCampaignResultId,
        student: new mongoose.Types.ObjectId('685c2633f5b6c16e86b1b26a'),
        medicalStaff: sampleMedicalStaffId,
        attending_parent: new mongoose.Types.ObjectId('685c226dbfd3a2ccf6e98951'),
        scheduledDate: new Date('2025-07-10T15:30:00.000Z'),
        duration: 60,
        reason: 'T∆∞ v·∫•n t√¢m l√Ω h·ªçc ƒë∆∞·ªùng',
        status: CONSULTATION_STATUS.SCHEDULED,
        notes: 'Ph·ª• huynh mu·ªën ƒë∆∞·ª£c t∆∞ v·∫•n v·ªÅ t√¢m l√Ω v√† h√†nh vi c·ªßa con t·∫°i tr∆∞·ªùng',
        notificationsSent: false,
      }
    ];

    // Insert consultations (skipping validation for demo purposes)
    const insertPromises = consultations.map(async (consultation) => {
      try {
        return await ConsultationSchedule.create(consultation);
      } catch (error) {
        console.log(`Skipping consultation due to validation: ${error.message}`);
        // Create a simplified version without validation
        return await ConsultationSchedule.collection.insertOne(consultation);
      }
    });

    const results = await Promise.allSettled(insertPromises);
    const successful = results.filter(r => r.status === 'fulfilled').length;
    
    console.log('‚úÖ Consultations seeded successfully!');
    console.log(`Created ${successful} consultations out of ${consultations.length} attempted`);
    
    // Print sample data structure for frontend reference
    console.log('\nüìÑ Sample data structure for frontend:');
    console.log(JSON.stringify({
      _id: "example_id",
      student_id: "685c2633f5b6c16e86b1b26a",
      parent_id: "685c226dbfd3a2ccf6e98951", 
      medical_staff_id: "sample_medical_staff_id",
      appointment_date: "2025-07-01",
      appointment_time: "09:00",
      reason: "Ki·ªÉm tra th·ªã l·ª±c ƒë·ªãnh k·ª≥",
      consultation_type: "in_person",
      status: "scheduled",
      notes: "H·ªçc sinh c·∫ßn ki·ªÉm tra th·ªã l·ª±c theo l·ªãch ƒë·ªãnh k·ª≥",
      createdAt: "2025-06-26T10:00:00.000Z"
    }, null, 2));

  } catch (error) {
    console.error('‚ùå Error seeding consultations:', error);
  } finally {
    mongoose.connection.close();
  }
};

// Run the seeder
seedConsultations();
